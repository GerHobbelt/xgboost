#!/usr/bin/groovy

// -*- mode: groovy -*-
// Jenkins pipeline
// See documents at https://jenkins.io/doc/book/pipeline/jenkinsfile/

import groovy.transform.Field

/* Unrestricted tasks: tasks that do NOT generate artifacts */
@Library('shared-libs') _

def artUrl="https://${ArtifactoryConstants.ARTIFACTORY_NAME}/artifactory/sw-spark-maven"


// Utility functions
@Field
def utils

pipeline {
    agent any

    // Setup common job properties
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        gitLabConnection('GitLab Master')
    }

    parameters {
        string(name: 'CUDA_VER', defaultValue: '11.2', description: 'cuda version, 11.2')
        string(name: 'REF', defaultValue: '\${gitlabBranch}', description: 'Commit to build')
    }

    environment {
        ART_URL = "${artUrl}"
    }

    // Build stages
    stages {
        stage('Jenkins: Get sources') {
            steps {
                updateGitlabCommitStatus(name: 'Jenkins CI', state: 'running')
                script {
                    utils = load('tests/ci_build/jenkins_tools_spark.Groovy')
                    utils.checkoutSrcs()
                }
                stash name: 'srcs', excludes: '.git/'
                milestone label: 'Sources ready', ordinal: 1
            }
        }
        stage('Jenkins: Build & Test') {
            agent { label 'docker-gpu' }
            steps {
                unstash name: 'srcs'
                script {
                    // prune unused images older than 48 hours
                    sh 'docker image prune -a --force --filter "until=48h" || true'

                    def IMAGE_NAME="${ArtifactoryConstants.ARTIFACTORY_NAME}/sw-spark-docker/xgboost:dev3-centos7-cuda11.2"
                    sh "docker pull $IMAGE_NAME"
                    // Speed up Docker building via '--cache-from $IMAGE_NAME'
                    def buildImage=docker.build(IMAGE_NAME,
                        "-f jenkins/local/Dockerfile.centos7_build --cache-from $IMAGE_NAME jenkins/local")
                    buildImage.inside("--runtime=nvidia") {
                        sh 'scl enable devtoolset-9 jenkins/local/build-jvm-premerge.sh'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def status = "failed"
                if (currentBuild.currentResult == "SUCCESS") {
                    status = "success"
                } else {
                    status = "failed"
                }
                updateGitlabCommitStatus(name: 'Jenkins CI', state: status)
            }
        }
    }

}
